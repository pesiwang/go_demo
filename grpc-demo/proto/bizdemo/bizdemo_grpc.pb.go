// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bizdemo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "proto/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BizDemoClient is the client API for BizDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BizDemoClient interface {
	GetData(ctx context.Context, in *DemoReq, opts ...grpc.CallOption) (*DemoResp, error)
	Test(ctx context.Context, in *common.TestReq, opts ...grpc.CallOption) (*common.TestResp, error)
}

type bizDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewBizDemoClient(cc grpc.ClientConnInterface) BizDemoClient {
	return &bizDemoClient{cc}
}

func (c *bizDemoClient) GetData(ctx context.Context, in *DemoReq, opts ...grpc.CallOption) (*DemoResp, error) {
	out := new(DemoResp)
	err := c.cc.Invoke(ctx, "/bizdemo.BizDemo/GetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bizDemoClient) Test(ctx context.Context, in *common.TestReq, opts ...grpc.CallOption) (*common.TestResp, error) {
	out := new(common.TestResp)
	err := c.cc.Invoke(ctx, "/bizdemo.BizDemo/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BizDemoServer is the server API for BizDemo service.
// All implementations should embed UnimplementedBizDemoServer
// for forward compatibility
type BizDemoServer interface {
	GetData(context.Context, *DemoReq) (*DemoResp, error)
	Test(context.Context, *common.TestReq) (*common.TestResp, error)
}

// UnimplementedBizDemoServer should be embedded to have forward compatible implementations.
type UnimplementedBizDemoServer struct {
}

func (UnimplementedBizDemoServer) GetData(context.Context, *DemoReq) (*DemoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetData not implemented")
}
func (UnimplementedBizDemoServer) Test(context.Context, *common.TestReq) (*common.TestResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}

// UnsafeBizDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BizDemoServer will
// result in compilation errors.
type UnsafeBizDemoServer interface {
	mustEmbedUnimplementedBizDemoServer()
}

func RegisterBizDemoServer(s grpc.ServiceRegistrar, srv BizDemoServer) {
	s.RegisterService(&BizDemo_ServiceDesc, srv)
}

func _BizDemo_GetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizDemoServer).GetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bizdemo.BizDemo/GetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizDemoServer).GetData(ctx, req.(*DemoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BizDemo_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BizDemoServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bizdemo.BizDemo/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BizDemoServer).Test(ctx, req.(*common.TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BizDemo_ServiceDesc is the grpc.ServiceDesc for BizDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BizDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bizdemo.BizDemo",
	HandlerType: (*BizDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetData",
			Handler:    _BizDemo_GetData_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _BizDemo_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bizdemo/bizdemo.proto",
}
