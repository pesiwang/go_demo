package main

import (
	"fmt"
	"strings"
	"unicode"
)

func main() {
	msgs := []string{
		// "你好 可以 认识一下吗",
		// "哥哥单身吗？找知己还是找对象呀",
		// "哥哥现在有空聊聊天吗",
		// "小哥哥，在忙什么呢？方便的话聊会儿啊",
		// "你猜我为什么找你聊天？",
		// "你好，你是来找什么的？",
		// "很高兴认识你 交个朋友小哥哥",
		// "你好呀哥哥在干嘛呢？",
		// "喜欢啥类型的女孩子？",
		// "哈喽  你是来找对象的还是来交友的呢？",
		// "深圳",
		// "我97的",
		// "26了",
		// "03的",
		// "干嘛呢",
		// "是来找对象还是找红颜的呀",
		// "哥哥，肉肉的女生喜欢吗",
		// "我有酒有故事，你有时间吗",
		// "15 72 &2888977【＋v】做鑫评抬",
		"哥哥，成熟的喜欢吗",
	}

	for _, m := range msgs {
		if isNormalMsg(m) {
			fmt.Printf("normal: %v\n", m)
		} else {
			fmt.Printf("not: %v\n", m)
		}
	}

}

func removeSpacesAndPunctuation(s string) string {
	var result strings.Builder

	for _, r := range s {
		if !unicode.IsSpace(r) && !unicode.IsPunct(r) {
			result.WriteRune(r)
		}
	}

	return result.String()
}

func isNormalMsg(msg string) bool {
	if strings.Contains(msg, "*") {
		// * 是特殊消息类型标志，不再额外处理，直接返回
		return false
	}

	normalMsg := []string{
		"为什么",
		"我有酒",
		"在不在",
		"在干啥",
		"喝奶茶",
		"吃饺子",
		"机器人",
		"小屁孩",
		"一个人",
		"有个人",
		"好不好",
		"我对你",
		"吃完了",
		"所以",
		"熟悉",
		"成功",
		"失败",
		"认真",
		"资料",
		"自己",
		"成熟",
		"情况",
		"要求",
		"头像",
		"是我",
		"本人",
		"故事",
		"类型",
		"撒娇",
		"挣钱",
		"介意",
		"孩子",
		"疼爱",
		"肯定",
		"高兴",
		"快乐",
		"算了",
		"在这",
		"最近",
		"平时",
		"经常",
		"每天",
		"朋友",
		"交个",
		"准备",
		"聊天",
		"工作",
		"生意",
		"打工",
		"睡觉",
		"洗澡",
		"思考",
		"工厂",
		"在家",
		"问题",
		"打字",
		"这样",
		"这个",
		"进来",
		"怎么",
		"在忙",
		"什么",
		"肉肉",
		"温柔",
		"美好",
		"亲爱",
		"认识",
		"开始",
		"知道",
		"理我",
		"走了",
		"有点",
		"抱抱",
		"休息",
		"去过",
		"下雨",
		"感觉",
		"非常",
		"一种",
		"那种",
		"一下",
		"一声",
		"一天",
		"一直",
		"一眼",
		"干嘛",
		"方便",
		"本地",
		"特别",
		"心里",
		"吃饭",
		"消息",
		"当然",
		"早上",
		"中午",
		"下午",
		"晚上",
		"刚才",
		"做啥",
		"这里",
		"回复",
		"继续",
		"寂寞",
		"对象",
		"知己",
		"可以",
		"阔以",
		"现在",
		"时间",
		"交友",
		"上班",
		"上课",
		"上学",
		"学生",
		"下班",
		"真人",
		"游戏",
		"你好",
		"您好",
		"你们",
		"您们",
		"我们",
		"哥哥",
		"帅哥",
		"宝贝",
		"宝宝",
		"希望",
		"弟弟",
		"男人",
		"男生",
		"老公",
		"谢谢",
		"哭笑",
		"呲牙",
		"微笑",
		"鬼脸",
		"玫瑰",
		"调皮",
		"奸笑",
		"表情",
		"可爱",
		"憨笑",
		"亲亲",
		"伤心",
		"流泪",
		"正经",
		"周末",
		"流汗",
		"可怜",
		"捂嘴",
		"闭嘴",
		"咖啡",
		"喷嚏",
		"发呆",
		"应该",
		"难过",
		"惊讶",
		"抱抱",
		"害羞",
		"爱心",
		"拳头",
		"尴尬",
		"握手",
		"发怒",
		"愉快",
		"想你",
		"想我",
		"喜欢",
		"容易",
		"单身",
		"了解",
		"结婚",
		"离婚",
		"离异",
		"互相",
		"红颜",
		"女生",
		"女友",
		"女孩",
		"阿姨",
		"妹妹",
		"异性",
		"晚安",
		"再见",
		"见面",
		"不敢",
		"厉害",
		"真实",
		"电视",
		"手机",
		"摸鱼",
		"做饭",
		"吃完",
		"吃饭",
		"意思",
		"幸福",
		"辛苦",
		"唱歌",
		"机会",
		"还在",
		"父母",
		"相信",
		"事业",
		"身边",
		"老婆",
		"艾玛",
		"一样",
		"牛",
		"真",
		"咋",
		"理",
		"问",
		"空",
		"尝",
		"做",
		"要",
		"试",
		"猜",
		"错",
		"对",
		"这",
		"人",
		"姐",
		"第",
		"一",
		"根",
		"饭",
		"刚",
		"很",
		"挺",
		"新",
		"缺",
		"早",
		"晚",
		"才",
		"睡",
		"得",
		"着",
		"忙",
		"去",
		"玩",
		"帅",
		"乖",
		"没",
		"事",
		"那",
		"哪",
		"里",
		"会",
		"女",
		"宝",
		"也",
		"还",
		"远",
		"近",
		"你",
		"您",
		"就",
		"是",
		"出",
		"来",
		"看",
		"听",
		"唱",
		"打",
		"想",
		"说",
		"聊",
		"等",
		"陪",
		"前",
		"明",
		"今",
		"天",
		"好",
		"色",
		"小",
		"大",
		"太",
		"胖",
		"跟",
		"累",
		"多",
		"晕",
		"笨",
		"不",
		"有",
		"过",
		"无",
		"能",
		"找",
		"hi",
		"HI",
		"Hi",
		"哈",
		"喽",
		"嗨",
		"都",
		"嘛",
		"呢",
		"呀",
		"的",
		"吗",
		"吧",
		"哇",
		"啊",
		"阿",
		"那",
		"哦",
		"了",
		"嗯",
		"啥",
		"恩",
		"啦",
		"哼",
		"额",
		"噢",
		"喔",
		"呗",
		"呵",
		"嘿",
		"耶",
		"么",
		"哒",
		"虚",
		"嘘",
		"嘻",
		"哎",
		"呦",
		"哟",
		"撒",
		"嗷",
	}
	/**
	0. 预处理消息：删除空格，标点符号
	1. 所有匹配长度 >= 消息长度 - 1, 过滤
	2. 所有匹配长度 > 6 && (所有匹配长度 / 消息长度) > 0.8, 过滤
	*/

	rawMsg := removeSpacesAndPunctuation(msg)
	fmt.Printf("raw msg:%v\n", rawMsg)
	msgLen := len([]rune(rawMsg))
	if msgLen <= 1 {
		return true
	}
	totalMatchLen := 0
	for _, nm := range normalMsg {
		cnt := strings.Count(rawMsg, nm)
		if cnt > 0 {
			mlen := len([]rune(nm))
			totalMatchLen += mlen * cnt
		}
	}

	fmt.Printf("totalMatchLen:%v, msgLen:%v, ratio: %v\n", totalMatchLen, msgLen, float64(totalMatchLen)/float64(msgLen))
	if totalMatchLen >= msgLen-1 || (totalMatchLen > 6 && (float64(totalMatchLen)/float64(msgLen)) > 0.8) {
		return true
	}

	return false
}
